#include "shader_src.h"

const char* vertShader =
"#version 330\n"
"uniform float fx, fy, cx, cy, W, H, nearZ, farZ;\n"
"uniform mat4 world2cam, projection;\n"
"uniform vec3 light_modelspace;\n"
"layout(location = 0) in vec3  position;\n"
"layout(location = 1) in vec2  uv;\n"
"layout(location = 2) in float material;\n"
"layout(location = 3) in vec3  normal;\n"
"layout(location = 4) in vec3  vcolor;\n"
"out vec4  color;\n"
"out vec4  out_vcolor;\n"
"out vec2  out_uv;\n"
"out float out_material;\n"
"out vec3  out_normal_modelspace;\n"
"out vec3  out_position_modelspace;\n"
"out vec3  out_light_modelspace;\n"
"out float depth;\n"
"void main(void)\n"
"{\n"
//modification
"   vec4 cam_pos = world2cam * vec4(position, 1);\n"
"   gl_Position.x = (cam_pos.x * fx + cx) * 2 / W - 1;\n"
"   gl_Position.y = (cam_pos.y * fy + cy) * 2 / H - 1;\n"
"   gl_Position.z = (cam_pos.z - nearZ) / (farZ - nearZ);\n"
"   gl_Position.w = cam_pos.z;\n"
"	gl_Position = projection * cam_pos;\n"

"   depth = cam_pos.z;\n"
"   int index = gl_VertexID % 3;\n"
"   color = vec4(0, 0, 0, 1);\n"
"   if (index == 0) color.x = 1; else if (index == 1) color.y = 1; else color.z = 1;\n"
"   out_vcolor = vec4(vcolor, 1);\n"
"   out_uv = uv;\n"
"	out_material = material;\n"
"	out_normal_modelspace = normal;\n"
"	out_position_modelspace = position;\n"
"	out_light_modelspace = light_modelspace - position;\n"
"}\n";

const char* Depth_fragShader =
"#version 330\n"
"in vec4 color;\n"
"in vec4 out_vcolor;\n"
"in float depth;\n"
"void main()\n"
"{\n"
"   gl_FragColor = vec4(depth, depth, depth, 1);\n"
"}\n";

const char* Info_fragShader =
"#version 330\n"
"in vec4 color;\n"
"in float depth;\n"
"void main()\n"
"{\n"
"   gl_FragColor = vec4(color.x, color.y, color.z, gl_PrimitiveID);\n"
"}\n";

const char* Color_fragShader =
"#version 330\n"
"in vec4 color;\n"
"in vec4 out_vcolor;\n"
"in float depth;\n"
"in vec2 out_uv;\n"
"in float out_material;\n"
"in vec3  out_normal_modelspace;\n"
"in vec3  out_light_modelspace;\n"
"in vec3  out_position_modelspace;\n"
"uniform sampler2DArray textureArray;\n"
"void main()\n"
"{\n"
"	vec3 color;\n"
"	vec3 LightColor = vec3(0.7, 0.7, 0.7);\n"
"	float LightPower = 20.0f;\n"
"	\n"
"	float distance = length( out_position_modelspace - out_light_modelspace );\n"
"	\n"
"	vec3 MaterialDiffuseColor = texture(textureArray, vec3(out_uv, out_material)).rgb;\n"
"	vec3 MaterialAmbientColor = vec3(0.3, 0.3, 0.3) * MaterialDiffuseColor;\n"
"	\n"
"	vec3 n = normalize( out_normal_modelspace );\n"
"	vec3 l = normalize( out_light_modelspace );\n"
"	float cosTheta = clamp(dot(n, l), 0, 1);\n"
"	\n"
"	color = MaterialAmbientColor + MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance*distance);\n"
//"	gl_FragColor = vec4(color, 1);\n"
"	gl_FragColor = texture(textureArray, vec3(out_uv, out_material));\n"
"}\n";

const char* imageView_vertShader =
"#version 330\n"
"layout(location = 0) in vec3 position;\n"
"out vec2 tex;\n"
"void main(void)\n"
"{\n"
"   gl_Position = vec4(position.xyz, 1);\n"
"   tex = vec2(position.x*0.5+0.5, 0.5-position.y*0.5);\n"
"}\n";

const char* imageView_fragShader =
"#version 330\n"
"in vec2 tex;\n"
"uniform sampler2DArray textureArray;\n"
"uniform sampler2D cameraBuffer;\n"
"uniform sampler2D depthBuffer;\n"
"uniform int layer;\n"
"uniform vec3 headset;\n"
"uniform vec3 up;\n"
"uniform vec3 right;\n"
"uniform vec3 dir;\n"
"uniform float W, H, fx, fy, cx, cy;\n"
"uniform int faceNum;\n"
"uniform int poseNum;\n"
"uniform sampler2D faces;\n"
"uniform sampler2D invposes;\n"
"out vec4 outColor;\n"
"void main(void)\n"
"{\n"
"   float z = texture(depthBuffer, vec2(tex.xy)).x;\n"
"   float x = (tex.x * W - cx) / fx * z;\n"
"   float y = (tex.y * H - cy) / fy * z;\n"
"   if (z == 0) {\n"
"       outColor = vec4(0.f,0.f,1.f,0.f);\n"
"       return;\n"
"   }\n"
"   vec3 pos = headset + z * dir + x * right + y * up;\n"
"   vec4 rec = texture(cameraBuffer, vec2(tex.xy));\n"
"   float fid = (rec.w + 0.5f) / faceNum;\n"
"   vec3 face = texture(faces, vec2(fid,0.5)).rgb;\n"
"   vec4 color = vec4(0.f,0.f,0.f,0.f);\n"
"   for (int i = 0; i < 3; ++i) {\n"
"       mat4 pose;\n"
"       float pid = (face[i] + 0.5) / poseNum;\n"
"       pose[0] = texture(invposes, vec2(1.0f/8,pid)).rgba;\n"
"       pose[1] = texture(invposes, vec2(3.0f/8,pid)).rgba;\n"
"       pose[2] = texture(invposes, vec2(5.0f/8,pid)).rgba;\n"
"       pose[3] = texture(invposes, vec2(7.0f/8,pid)).rgba;\n"
"//       pose = mat4(1.0f);\n"
"       vec4 cam_pos = pose * vec4(pos, 1);\n"
"       float coord_x = (cam_pos.x / cam_pos.z * fx + cx) / W;\n"
"       float coord_y = (cam_pos.y / cam_pos.z * fy + cy) / H;\n"
"       if (coord_x >= 0 && coord_x <= 1 && coord_y >= 0 && coord_y <= 1 && cam_pos.z > 0) {\n"
"          vec3 res = texture(textureArray, vec3(coord_x, coord_y, int(face[i]+0.5f))).rgb;\n"
"          if (res.x>0 || res.y>0 || res.z > 0) {\n"
"              color += vec4(res * rec[i], rec[i]);\n"
"          }\n"
"       }\n"
"   }\n"
"   if (color.w > 0) {\n"
"      outColor = color / color.w;\n"
"   } else {\n"
"	   outColor = vec4(0.f, 0.f, 1.f, 1.f);\n"
"   }\n"
"}\n";
